from enum import Enum
import os
import re
from backend.api import GptAPI
from backend.types import GenerationRequest
from utils.keyboards import regenerate_keyboard
from telebot.async_telebot import AsyncTeleBot
import telebot

from storage.api import KeyValueStorage
from utils.utils import is_date_after
from utils.validator import Validator

KEY = os.getenv("TELEGRAM_API_KEY")
if not KEY:
    raise RuntimeError("No API key found")
bot = AsyncTeleBot(KEY)


class State(str, Enum):
    # Required fields
    START = "start"
    NAME = "name"
    SEX = "sex"
    BIRTH_DATE = "birth_date"
    DEATH_DATE = "death_date"
    EDIT_EPITAPH = "edit_epitaph"
    EDIT_BIOGRAPHY = "edit_biography"
    # Optional fields
    QUESTIONS = "questions"

    # Generated fields
    EPITAPH = "epitaph"
    BIOGRAPHY = "biography"

    # Save result
    FINISHED = "finished"


def create_mode_keyboard():
    web_app_link = telebot.types.WebAppInfo(
        "https://themixadev.github.io/GagarinHackView/")

    keyboard = telebot.types.InlineKeyboardMarkup()
    web_app_link = telebot.types.InlineKeyboardButton(
        "üì± –†–µ–∂–∏–º –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=web_app_link)
    start_button = telebot.types.InlineKeyboardButton(
        "üö© –ù–∞—á–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ", callback_data="start")
    keyboard.add(web_app_link)
    keyboard.add(start_button)
    return keyboard


@bot.message_handler(commands=['start', 'help'])
async def start(message):
    KeyValueStorage.set(message.chat.id, State.START.value)
    await bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç! –Ø - MemoryCode –ë–æ—Ç, –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–∞–º—è—Ç–∏. –ú–æ—è –∑–∞–¥–∞—á–∞ - —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–∞–º—è—Ç–∏ –ª–µ–≥–∫–∏–º –∏ –ø—Ä–∏—è—Ç–Ω—ã–º –¥–ª—è –≤–∞—Å. \
–í–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –º–Ω–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –æ–¥–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É –∑–∞ —Ä–∞–∑, –∏ —è –ø–æ–º–æ–≥—É –≤–∞–º —Å–æ–∑–¥–∞—Ç—å –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã. \
–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å —ç—Ç–æ—Ç –≤–∞–∂–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –≤–º–µ—Å—Ç–µ?\n\n–¢–∞–∫ –∂–µ —è –º–æ–≥—É —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ä–µ–∂–∏–º–µ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—ã. –î–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üôÇ',
                           reply_markup=create_mode_keyboard())


@bot.message_handler(func=lambda message: not KeyValueStorage.get(str(message.chat.id)).value)
async def handle_message(message):
    await bot.send_message(
        message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É '/start' –∏–ª–∏ '/mode', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!")


@bot.message_handler(func=lambda message: message.text == "–†–µ–∂–∏–º —á–∞—Ç-–±–æ—Ç–∞" and KeyValueStorage.get(str(message.chat.id)).value == State.START.value)
async def go_to_bot_mode(message):
    KeyValueStorage.set(message.chat.id, State.BOT.value)
    await bot.reply_to(message, '–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–µ–∂–∏–º —á–∞—Ç-–±–æ—Ç–∞. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: \'/mode\'', reply_markup=None)


@bot.message_handler(func=lambda message: KeyValueStorage.get(str(message.chat.id)).value == State.START.value)
async def handle_random_message(message):
    keyboard = telebot.types.InlineKeyboardMarkup()
    keyboard.add(telebot.types.InlineKeyboardButton(
        text="–ù–∞—á–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ", callback_data="start"))
    await bot.reply_to(message, "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ", reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: call.data == "start")
async def start_callback(call):
    # clear old data
    KeyValueStorage.delete_prefix(call.message.chat.id)
    KeyValueStorage.set(call.message.chat.id, State.SEX.value)
    keyboard = telebot.types.ReplyKeyboardMarkup(
        resize_keyboard=True, one_time_keyboard=True)
    keyboard.add(telebot.types.KeyboardButton(text="‚ôÇÔ∏è –ú—É–∂—Å–∫–æ–π"),
                 telebot.types.KeyboardButton(text="‚ôÄÔ∏è –ñ–µ–Ω—Å–∫–∏–π"))
    await bot.send_message(call.message.chat.id, "–û—Ç–ª–∏—á–Ω–æ, –¥–∞–≤–∞–π—Ç–µ –∂–µ –ø—Ä–∏—Å—Ç—É–ø–∏–º –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–∞–º—è—Ç–∏! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –≤–Ω–µ—Å—Ç–∏ –≤ –ø–∞–º—è—Ç—å.",
                           reply_markup=keyboard)


@bot.message_handler(content_types=['text'], func=lambda message:
                     KeyValueStorage.get(str(message.chat.id)).value == State.SEX.value and
                     (message.text == "‚ôÇÔ∏è –ú—É–∂—Å–∫–æ–π" or message.text == "‚ôÄÔ∏è –ñ–µ–Ω—Å–∫–∏–π"))
async def handle_sex(message):
    # store sex in database
    KeyValueStorage.set(f"{message.chat.id}.sex", message.text[2:])
    await bot.reply_to(message, "–•–æ—Ä–æ—à–æ, —è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞–ø–æ–º–Ω—é –≤–∞—à –æ—Ç–≤–µ—Ç!")

    # go to name mode
    KeyValueStorage.set(message.chat.id, State.NAME.value)
    await bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é, –∏–º—è –∏ –æ—Ç—á–µ—Å—Ç–≤–æ (–ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏):")


@bot.message_handler(content_types=['text'], func=lambda message: KeyValueStorage.get(str(message.chat.id)).value == State.NAME.value)
async def handle_name(message):
    # delete repeated whitespaces
    cleaned_string = re.sub(r'\s+', ' ', message.text)
    # validate name
    is_valid_name = Validator.validate_name(cleaned_string)
    if not is_valid_name:
        await bot.send_message(message.chat.id, "üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –≤–∞–º–∏ –∏–º—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤–≤–µ–ª–∏ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è –Ω–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü–µ –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ü–∏—Ñ—Ä –∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    # store name
    KeyValueStorage.set(f"{message.chat.id}.name", cleaned_string)
    await bot.reply_to(message, "–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ, –±—É–¥—É –¥–µ—Ä–∂–∞—Ç—å —ç—Ç–æ –∏–º—è —É —Å–µ–±—è –≤ –≥–æ–ª–æ–≤–µ! üß†")

    # go to birth date mode
    KeyValueStorage.set(message.chat.id, State.BIRTH_DATE.value)
    await bot.send_message(message.chat.id, f"–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ–≥–¥–∞ —Ä–æ–¥–∏–ª—Å—è(-–∞—Å—å) {cleaned_string} –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–î–î.–ú–ú.–ì–ì–ì–ì' (–Ω–∞–ø—Ä–∏–º–µ—Ä, 31.12.1989):")


@bot.message_handler(content_types=['text'], func=lambda message: KeyValueStorage.get(str(message.chat.id)).value == State.BIRTH_DATE.value)
async def handle_birth_date(message):
    # change format of date, if user input is invalid
    date = message.text.replace('-', '.').replace(' ', '.').replace('/', '.')

    # validate date
    is_date_valid = Validator.validate_date(date)
    if not is_date_valid:
        await bot.send_message(message.chat.id, "üò• –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–î–î.–ú–ú.–ì–ì–ì–ì' (–Ω–∞–ø—Ä–∏–º–µ—Ä, 31.12.1990):")
        return

    # store birth_date
    KeyValueStorage.set(f"{message.chat.id}.birth_date", date)

    # go to death date mode
    KeyValueStorage.set(message.chat.id, State.DEATH_DATE.value)
    await bot.send_message(message.chat.id, "–í—ã —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –ø–æ–ª–µ '–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è'. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É —Å–º–µ—Ä—Ç–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–î–î.–ú–ú.–ì–ì–ì–ì' (–Ω–∞–ø—Ä–∏–º–µ—Ä, 31.12.2020):")


@bot.message_handler(content_types=['text'], func=lambda message: KeyValueStorage.get(str(message.chat.id)).value == State.DEATH_DATE.value)
async def handle_death_date(message):
    date = message.text.replace('-', '.').replace(' ', '.').replace('/', '.')

    is_date_valid = Validator.validate_date(date)
    if not is_date_valid:
        await bot.send_message(message.chat.id, "üò• –î–∞—Ç–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–î–î.–ú–ú.–ì–ì–ì–ì' (–Ω–∞–ø—Ä–∏–º–µ—Ä, 31.12.2020):")

    birth_date = KeyValueStorage.get(f"{message.chat.id}.birth_date").value

    if not birth_date:
        keyboard = telebot.types.InlineKeyboardMarkup()
        keyboard.add(telebot.types.InlineKeyboardButton(
            text="–ù–∞—á–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ", callback_data="start"))
        KeyValueStorage.set(message.chat.id, State.START.value)
        await bot.send_message(message.chat.id, "üòø –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –µ—â—ë —Ä–∞–∑...", reply_markup=keyboard)
        return

    if not is_date_after(date, birth_date):
        await bot.send_message(message.chat.id, "üò• –î–∞—Ç–∞ —Å–º–µ—Ä—Ç–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –¥–∞—Ç—É.", reply_markup=None)
        return

    # store death_date
    KeyValueStorage.set(f"{message.chat.id}.death_date", date)
    await bot.reply_to(message, "–ü–æ–ª–µ —Å –¥–∞—Ç–æ–π —Å–º–µ—Ä—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")

    # ask youser for mode
    keyboard = telebot.types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(telebot.types.InlineKeyboardButton(
        text="‚ùì –î–∞–ª–µ–µ", callback_data=f"questions_{message.id}"), telebot.types.InlineKeyboardButton(
        text="‚è© –ì–µ–Ω–µ—Ä–∞—Ü–∏—è", callback_data=f"generate_{message.chat.id}"))
    await bot.send_message(message.chat.id,
                           "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã.\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–î–∞–ª–µ–µ', —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –µ—â—ë –Ω–∞ –ø–∞—Ä—É –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤, —á—Ç–æ–±—ã —è —Å–º–æ–≥ —É–∑–Ω–∞—Ç—å –ø–æ–±–æ–ª—å—à–µ –æ –≤–Ω–æ—Å–∏–º–æ–º —á–µ–ª–æ–≤–µ–∫–µ.\n–õ–∏–±–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è', –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å—Ä–∞–∑—É –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–æ–∑–¥–∞–Ω–∏—é –±–∏–æ–≥—Ä–∞—Ñ–∏–∏ –∏ —ç–ø–∏—Ç–∞—Ñ–∏–∏.",
                           reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: call.data.startswith("questions_") and KeyValueStorage.get(str(call.from_user.id)).value == State.DEATH_DATE.value)
async def questions(call: telebot.types.CallbackQuery):
    await bot.delete_message(message_id=call.message.id, chat_id=call.from_user.id)
    chat_id = call.from_user.id
    # go to question mode

    name = KeyValueStorage.get(f"{chat_id}.name").value
    sex = KeyValueStorage.get(f"{chat_id}.sex").value
    birth_date = KeyValueStorage.get(f"{chat_id}.birth_date").value
    death_date = KeyValueStorage.get(f"{chat_id}.death_date").value

    request_body = GenerationRequest(name, sex, birth_date, death_date)

    q = GptAPI.generate_questions(request_body)
    await bot.send_message(chat_id=chat_id, text="\n".join(q))
    KeyValueStorage.set(call.from_user.id, State.QUESTIONS.value)


@bot.callback_query_handler(func=lambda call: call.data.startswith("generate_") and KeyValueStorage.get(str(call.from_user.id)).value == State.DEATH_DATE.value)
async def generate(call: telebot.types.CallbackQuery):
    await bot.delete_message(message_id=call.message.id, chat_id=call.from_user.id)
    chat_id = int(call.data.split("_")[1])

    # go to epitaph mode
    KeyValueStorage.set(chat_id, State.EPITAPH.value)

    name = KeyValueStorage.get(f"{chat_id}.name").value
    sex = KeyValueStorage.get(f"{chat_id}.sex").value
    birth_date = KeyValueStorage.get(f"{chat_id}.birth_date").value
    death_date = KeyValueStorage.get(f"{chat_id}.death_date").value

    request_body = GenerationRequest(name, sex, birth_date, death_date)

    generation_msg = await bot.send_message(chat_id, f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ, –ø–æ–∫–∞ —è —Å–æ–∑–¥–∞–º –¥–ª—è –≤–∞—Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Å–º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ.")
    epitah = GptAPI.generate_epitaph_gigachat(request_body)
    KeyValueStorage.set(f"{chat_id}.epitaph", epitah)
    keyboard = regenerate_keyboard(
        f"accept_{State.EPITAPH.value}", f"regenerate_{State.EPITAPH.value}", f"edit_{State.EPITAPH.value}")
    await bot.edit_message_text(text=f"–≠–ø–∏—Ç–∞—Ñ–∏—è:\n{epitah}",
                                reply_markup=keyboard, chat_id=chat_id, message_id=generation_msg.id)


@bot.callback_query_handler(func=lambda call: call.data.startswith("regenerate_"))
async def regenerate(call: telebot.types.CallbackQuery):
    obj_type = call.data.split("_")[1]
    chat_id = call.message.chat.id
    msg_id = call.message.id

    name = KeyValueStorage.get(f"{chat_id}.name").value
    sex = KeyValueStorage.get(f"{chat_id}.sex").value
    birth_date = KeyValueStorage.get(f"{chat_id}.birth_date").value
    death_date = KeyValueStorage.get(f"{chat_id}.death_date").value

    request_body = GenerationRequest(name, sex, birth_date, death_date)
    if obj_type == State.EPITAPH.value:
        epitah = GptAPI.generate_epitaph_gigachat(request_body)
        KeyValueStorage.set(f"{chat_id}.epitaph", epitah)
        keyboard = regenerate_keyboard(
            f"accept_{State.EPITAPH.value}", call.data, f"edit_{State.EPITAPH.value}")
        await bot.edit_message_text(text=f"–≠–ø–∏—Ç–∞—Ñ–∏—è:\n{epitah}", reply_markup=keyboard, chat_id=chat_id, message_id=msg_id)
    elif obj_type == State.BIOGRAPHY.value:
        biography = GptAPI.generate_biography_gigachat(request_body)
        KeyValueStorage.set(f"{chat_id}.biography", biography)
        keyboard = regenerate_keyboard(
            f"accept_{State.BIOGRAPHY.value}", call.data, f"edit_{State.BIOGRAPHY.value}")
        await bot.edit_message_text(text=f"–ë–∏–æ–≥—Ä–∞—Ñ–∏—è:\n{biography}", reply_markup=keyboard, chat_id=chat_id, message_id=msg_id)


@bot.callback_query_handler(func=lambda call: call.data.startswith("accept_"))
async def accept_epitaph(call: telebot.types.CallbackQuery):
    chat_id = call.message.chat.id
    await bot.edit_message_reply_markup(chat_id=chat_id, message_id=call.message.id, reply_markup=None)
    await bot.reply_to(text=f"{'–≠–ø–∏—Ç–∞—Ñ–∏—è' if call.data.split('_')[1] == State.EPITAPH.value else '–ë–∏–æ–≥—Ä–∞—Ñ–∏—è'} –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!", message=call.message)


@bot.callback_query_handler(func=lambda call: call.data.startswith("edit_"))
async def edit(call: telebot.types.CallbackQuery):
    obj_type = call.data.split("_")[1]

    if obj_type == State.EPITAPH.value:
        KeyValueStorage.set(call.from_user.id, State.EDIT_EPITAPH.value)
    elif obj_type == State.BIOGRAPHY.value:
        KeyValueStorage.set(call.from_user.id, State.EDIT_BIOGRAPHY.value)
    await bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.id, reply_markup=None)
    await bot.send_message(chat_id=call.message.chat.id, text="–ü—Ä–∏—à–ª–∏ –º–Ω–µ –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å–≤–æ—é –≤–µ—Ä—Å–∏—é —Ç–µ–∫—Å—Ç–∞ –∏ —è –µ–≥–æ —Å–æ—Ö—Ä–∞–Ω—é!")

@bot.message_handler(content_types=['text'], func=lambda message: KeyValueStorage.get(str(message.from_user.id)).value in [State.EDIT_EPITAPH.value, State.EDIT_BIOGRAPHY.value])
async def handle_edited_text(message: telebot.types.Message):
    if KeyValueStorage.get(str(message.from_user.id)).value == State.EDIT_EPITAPH.value:
        KeyValueStorage.set(f"{message.chat.id}.epitaph", message.text)
        await bot.send_message(chat_id=message.chat.id, text="–¢–µ–∫—Å—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!")
        KeyValueStorage.set(str(message.from_user.id), State.BIOGRAPHY.value)

    elif KeyValueStorage.get(str(message.from_user.id)).value == State.EDIT_BIOGRAPHY.value:
        KeyValueStorage.set(f"{message.chat.id}.biography", message.text)
        await bot.send_message(chat_id=message.chat.id, text="–¢–µ–∫—Å—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!")
        
if __name__ == "__main__":
    import asyncio
    asyncio.run(bot.polling())
